{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toArray from \"C:/Users/Fernando/Documents/ESTUDOS-TI/Rocketseat/NLW/aulas/semova-next/node_modules/@babel/runtime/helpers/esm/toArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Fernando\\\\Documents\\\\ESTUDOS-TI\\\\Rocketseat\\\\NLW\\\\aulas\\\\semova-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _ref2,\n      _ref3 = _toArray(_ref2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"lIgE7IFKF0067ZYEERnSVPjxmqw=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/Users/Fernando/Documents/ESTUDOS-TI/Rocketseat/NLW/aulas/semova-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAcA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAkE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,kBAC7CJ,QAAQ,CAAC,CAAD,CADqC;AAAA,MAChEK,KADgE;AAAA,MACzDC,QADyD;;AAAA,mBAErBN,QAAQ,CAAC,CAAD,CAFa;AAAA,MAEhEO,iBAFgE;AAAA,MAE7CC,oBAF6C;;AAAA,mBAGjBR,QAAQ,CAAC,CAAD,CAHS;AAAA,MAGhES,mBAHgE;AAAA,MAG3CC,sBAH2C;;AAAA;AAAA;;AAMvE,WAASC,OAAT,GAAkB;AAChBL,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASO,iBAAT,GAA4B;AAC1B,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBf,UAAU,CAACgB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGjB,UAAU,CAACY,oBAAD,CAA5B;AACD;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EAAE;AACLR,MAAAA,KAAK,EAALA,KADK;AAELE,MAAAA,iBAAiB,EAAjBA,iBAFK;AAGLE,MAAAA,mBAAmB,EAAnBA,mBAHK;AAILE,MAAAA,OAAO,EAAPA,OAJK;AAKLC,MAAAA,iBAAiB,EAAjBA;AALK,KADP;AAAA,cASCR;AATD;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GA5BeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface ChallengesContextData {\r\n  level: number;\r\n  currentExperience: number;\r\n  challengesCompleted: number;\r\n  levelUp: () => void;\r\n  startNewChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({}as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps){\r\n  const [level, setLevel] = useState(1);\r\n  const [currentExperience, setCurrentExperience] = useState(0);\r\n  const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n  const []\r\n\r\n  function levelUp(){\r\n    setLevel(level + 1);\r\n  }\r\n  \r\n  function startNewChallenge(){\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n    const challenge = challenges[randomChallengeIndex];\r\n  }\r\n\r\n  return (\r\n    <ChallengesContext.Provider \r\n    value={{ \r\n      level, \r\n      currentExperience, \r\n      challengesCompleted, \r\n      levelUp,\r\n      startNewChallenge \r\n      }}\r\n      >\r\n    {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}