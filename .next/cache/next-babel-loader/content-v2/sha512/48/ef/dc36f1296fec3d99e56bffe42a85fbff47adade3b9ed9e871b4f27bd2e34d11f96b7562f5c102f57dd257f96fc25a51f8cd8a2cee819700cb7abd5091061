{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Fernando\\\\Documents\\\\ESTUDOS-TI\\\\Rocketseat\\\\NLW\\\\aulas\\\\semova-next\\\\src\\\\contexts\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nvar countdownTimeout;\nexport var CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1]; // useState coloca o estado no componente - começaem 25 minutos - 60 é a quantidde de segundos em cada minuto\n\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1]; // esse estado vai armazenar se o countdown está iniciado ou parado\n\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1]; // esse estado vai armazenar se o ciclo terminou\n\n\n  var minutes = Math.floor(time / 60); // calcula os minutos - math é usado para arredondar - floor arredonda pra baixo\n\n  var seconds = time % 60; // calcula os segundos\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n    setHasFinished;\n  } // useEffect é um gerador de efeitos colaterais \n  // se active for true e o time não chegou a 0, depois de 1 segundos (1000), o countdown vai diminuir em 1 segundo\n\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true); // ciclo finalizado verdadeiro\n\n      setIsActive(false); // contador fica inativo\n\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownProvider, \"cVu0hsDf1rnm10+qbfS96WIdEJo=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/Users/Fernando/Documents/ESTUDOS-TI/Rocketseat/NLW/aulas/semova-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","countdownTimeout","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,IAAIC,gBAAJ;AAEA,OAAO,IAAMC,gBAAgB,gBAAGN,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASO,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,oBACzCP,UAAU,CAACG,iBAAD,CAD+B;AAAA,MAC9DK,iBAD8D,eAC9DA,iBAD8D;;AAAA,kBAG9CN,QAAQ,CAAC,MAAM,EAAP,CAHsC;AAAA,MAG/DO,IAH+D;AAAA,MAGzDC,OAHyD,iBAGtB;;;AAHsB,mBAItCR,QAAQ,CAAC,KAAD,CAJ8B;AAAA,MAI/DS,QAJ+D;AAAA,MAIrDC,WAJqD,kBAInB;;;AAJmB,mBAKhCV,QAAQ,CAAC,KAAD,CALwB;AAAA,MAK/DW,WAL+D;AAAA,MAKlDC,cALkD,kBAKf;;;AAEvD,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB,CAPsE,CAOvB;;AAC/C,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB,CARsE,CAQvB;;AAE/C,WAASU,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAACjB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAI,IAAAA,cAAc;AACf,GAnBqE,CAsBtE;AACA;;;AACAb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBL,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,YAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd,CADiC,CACT;;AACxBF,MAAAA,WAAW,CAAC,KAAD,CAAX,CAFiC,CAET;;AACxBJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAChCM,MAAAA,OAAO,EAAPA,OADgC;AAEhCG,MAAAA,OAAO,EAAPA,OAFgC;AAGhCL,MAAAA,WAAW,EAAXA,WAHgC;AAIhCF,MAAAA,QAAQ,EAARA,QAJgC;AAKhCQ,MAAAA,cAAc,EAAdA,cALgC;AAMhCC,MAAAA,cAAc,EAAdA;AANgC,KAAlC;AAAA,cAQGb;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAjDeD,iB;;KAAAA,iB","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\ninterface CountdownContextData {\r\n      minutes: number;\r\n      seconds: number;\r\n      hasFinished: boolean;\r\n      isActive: boolean;\r\n      startCountdown: () => void;\r\n      resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData);\r\n\r\nexport function CountdownProvider({ children }: CountdownProviderProps) {\r\n  const { startNewChallenge }= useContext(ChallengesContext);\r\n  \r\n  const [time, setTime] = useState(0.1 * 60);     // useState coloca o estado no componente - começaem 25 minutos - 60 é a quantidde de segundos em cada minuto\r\n  const [isActive, setIsActive] = useState(false);   // esse estado vai armazenar se o countdown está iniciado ou parado\r\n  const [hasFinished, setHasFinished] = useState(false); // esse estado vai armazenar se o ciclo terminou\r\n\r\n  const minutes = Math.floor(time / 60);         // calcula os minutos - math é usado para arredondar - floor arredonda pra baixo\r\n  const seconds = time % 60;                     // calcula os segundos\r\n\r\n  function startCountdown() {\r\n    setIsActive(true);\r\n  }\r\n\r\n  function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setTime(0.1 * 60);\r\n    setHasFinished\r\n  }\r\n\r\n\r\n  // useEffect é um gerador de efeitos colaterais \r\n  // se active for true e o time não chegou a 0, depois de 1 segundos (1000), o countdown vai diminuir em 1 segundo\r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time - 1);\r\n      }, 1000)\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true);   // ciclo finalizado verdadeiro\r\n      setIsActive(false);     // contador fica inativo\r\n      startNewChallenge();\r\n    }\r\n  }, [isActive, time])\r\n  \r\n  return (\r\n    <CountdownContext.Provider value={{\r\n      minutes,\r\n      seconds,\r\n      hasFinished,\r\n      isActive,\r\n      startCountdown,\r\n      resetCountdown,\r\n    }}>\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}