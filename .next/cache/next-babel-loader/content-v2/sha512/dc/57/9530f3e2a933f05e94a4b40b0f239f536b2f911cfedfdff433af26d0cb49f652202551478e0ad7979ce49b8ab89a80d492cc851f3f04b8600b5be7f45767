{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fernando\\\\Documents\\\\ESTUDOS-TI\\\\Rocketseat\\\\NLW\\\\aulas\\\\semova-next\\\\src\\\\components\\\\Countdown.tsx\";\nimport { useState, useEffect } from 'react';\nimport styles from '../styles/components/Countdown.module.css';\nlet countdownTimeout;\nexport function Countdown() {\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60); // useState coloca o estado no componente - começaem 25 minutos - 60 é a quantidde de segundos em cada minuto\n\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false); // esse estado vai armazenar se o countdown está iniciado ou parado\n\n  const {\n    0: hasFinished,\n    1: setHashFinished\n  } = useState(false); // esse estado vai armazenar se o ciclo terminou\n\n  const minutes = Math.floor(time / 60); // calcula os minutos - math é usado para arredondar - floor arredonda pra baixo\n\n  const seconds = time % 60; // calcula os segundos\n\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split(''); // transformando minutos em String - padStart verifica se há dois caracteres, ele preenche a esquerda com 0 - split é responsável por dividir a string\n\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split(''); // transformando segundos em String\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n  } // useEffect é um gerador de efeitos colaterais \n  // se active for true e o time não chegou a 0, depois de 1 segundos (1000), o countdown vai diminuir em 1 segundo\n\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true); // estado finalizado\n\n      setIsActive(false);\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: `${styles.countdownButton} ${styles.countdownButtonActive}`,\n      onClick: resetCountdown,\n      children: \"Abandonar ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: styles.countdownButton,\n      onClick: startCountdown,\n      children: \"Iniciar um ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Fernando/Documents/ESTUDOS-TI/Rocketseat/NLW/aulas/semova-next/src/components/Countdown.tsx"],"names":["useState","useEffect","styles","countdownTimeout","Countdown","time","setTime","isActive","setIsActive","hasFinished","setHashFinished","minutes","Math","floor","seconds","minuteLeft","minuteRight","String","padStart","split","secondLeft","secondRight","startCountdown","resetCountdown","clearTimeout","setTimeout","setHasFinished","countdownContainer","countdownButton","countdownButtonActive"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { start } from 'repl';\r\nimport styles from '../styles/components/Countdown.module.css';\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function Countdown () {\r\n  const [time, setTime] = useState(0.1 * 60);     // useState coloca o estado no componente - começaem 25 minutos - 60 é a quantidde de segundos em cada minuto\r\n  const [isActive, setIsActive] = useState(false);   // esse estado vai armazenar se o countdown está iniciado ou parado\r\n  const [hasFinished, setHashFinished] = useState(false); // esse estado vai armazenar se o ciclo terminou\r\n\r\n  const minutes = Math.floor(time / 60);         // calcula os minutos - math é usado para arredondar - floor arredonda pra baixo\r\n  const seconds = time % 60;                     // calcula os segundos\r\n\r\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');    // transformando minutos em String - padStart verifica se há dois caracteres, ele preenche a esquerda com 0 - split é responsável por dividir a string\r\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');    // transformando segundos em String\r\n\r\n  function startCountdown() {\r\n    setIsActive(true);\r\n  }\r\n\r\n  function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setTime(0.1 * 60);\r\n  }\r\n\r\n\r\n  // useEffect é um gerador de efeitos colaterais \r\n  // se active for true e o time não chegou a 0, depois de 1 segundos (1000), o countdown vai diminuir em 1 segundo\r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time - 1);\r\n      }, 1000)\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true);   // estado finalizado\r\n      setIsActive(false);\r\n    }\r\n  }, [isActive, time])\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.countdownContainer}>\r\n        <div>\r\n          <span>{minuteLeft}</span>\r\n          <span>{minuteRight}</span>\r\n        </div>\r\n        <span>:</span>\r\n        <div>\r\n          <span>{secondLeft}</span>\r\n          <span>{secondRight}</span>\r\n        </div>\r\n      </div>\r\n\r\n      { isActive ? (\r\n        <button \r\n          type=\"button\" \r\n          className={`${styles.countdownButton} ${styles.countdownButtonActive}`}\r\n          onClick={resetCountdown}\r\n      >   \r\n          Abandonar ciclo     \r\n      </button>\r\n      ) : (\r\n        <button \r\n          type=\"button\" \r\n          className={styles.countdownButton}\r\n          onClick={startCountdown}\r\n        >\r\n          Iniciar um ciclo\r\n        </button>\r\n      ) }        \r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}